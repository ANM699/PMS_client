{"version":3,"sources":["utils/index.js","components/task/list.jsx","components/task/edit-modal.jsx","containers/project/task/task.jsx","components/board/item.module.less","components/board/column.module.less","components/board/item.jsx","components/board/column.jsx","containers/project/board/board.jsx"],"names":["sortTasks","tasks","sortedTasks","todo","doing","done","Array","isArray","forEach","task","status","push","color","display","Column","Table","List","props","data","size","onItemEditClick","editable","dataSource","pagination","rowKey","width","title","dataIndex","key","render","value","p","users","Group","map","user","_id","username","placement","style","backgroundColor","avatar","icon","UserOutlined","record","onClick","e","preventDefault","EditOutlined","Option","Select","StoryModal","visible","onOk","onCancel","useState","setStatus","Form","useForm","form","useEffect","startDate","moment","endDate","selectedUsers","setFieldsValue","resetFields","forceRender","validateFields","then","values","catch","info","console","log","okText","cancelText","labelCol","span","wrapperCol","Item","name","label","rules","required","message","showSearch","placeholder","optionFilterProp","optionLabelProp","mode","index","email","onChange","target","Task","setVisible","setTask","setUsers","setData","reqMemberList","res","result","code","format","filter","indexOf","reqEditTask","taskList","updateTasks","module","exports","draggableId","provided","snapshot","className","styles","container","ref","innerRef","draggableProps","dragHandleProps","hoverable","content","date","createDate","displayDate","id","droppableId","droppableProps","Board","setValue","setTitle","setTasks","params","match","type","reqTaskList","originalTasks","tasksOfList","Object","flat","boardView","length","image","Empty","PRESENTED_IMAGE_SIMPLE","onDragEnd","destination","source","start","finish","draggedTask","find","startTasks","finishTasks","splice","keys","c","listView","extra","buttonStyle","Button","ProjectOutlined","MenuOutlined"],"mappings":"4FAAA,0EAMO,SAASA,EAAUC,GACxB,IAAIC,EAAc,CAChBC,KAAM,GACNC,MAAO,GACPC,KAAM,IAOR,OALIC,MAAMC,QAAQN,IAChBA,EAAMO,SAAQ,SAACC,GACbP,EAAYO,EAAKC,QAAQC,KAAKF,MAG3BP,EAGF,IAAMQ,EAAS,CACpBP,KAAM,CACJS,MAAO,UACPC,QAAS,sBAEXT,MAAO,CACLQ,MAAO,UACPC,QAAS,sBAEXR,KAAM,CACJO,MAAO,UACPC,QAAS,wB,mKC3BLC,EAAWC,IAAXD,OAEO,SAASE,EAAKC,GAAQ,IAEjCC,EAKED,EALFC,KACAR,EAIEO,EAJFP,OAHgC,EAO9BO,EAHFE,YAJgC,MAIzB,UAJyB,EAKhCC,EAEEH,EAFFG,gBALgC,EAO9BH,EADFI,gBANgC,SASlC,OACE,kBAAC,IAAD,CAAOC,WAAYJ,EAAMK,YAAY,EAAOC,OAAO,MAAML,KAAMA,GAC7D,kBAACL,EAAD,CACEW,MAAM,OACNC,MAAM,eACNC,UAAU,SACVC,IAAI,SACJC,OAAQ,SAACC,GACP,IAAMC,EAAIrB,EAAOoB,GACjB,OAAO,kBAAC,IAAD,CAAKlB,MAAOmB,EAAEnB,OAAQmB,EAAElB,YAGnC,kBAACC,EAAD,CAAQY,MAAM,eAAKC,UAAU,UAAUC,IAAI,YAC3C,kBAACd,EAAD,CACEY,MAAM,qBACNC,UAAU,QACVC,IAAI,QACJC,OAAQ,SAACG,GAAD,OACN,kBAAC,IAAOC,MAAR,KACGD,EAAME,KAAI,SAACC,GAAD,OACT,kBAAC,IAAD,CAASP,IAAKO,EAAKC,IAAKV,MAAOS,EAAKE,SAAUC,UAAU,OACtD,kBAAC,IAAD,CACEC,MAAO,CAAEC,gBAAiBL,EAAKM,QAC/BC,KAAM,kBAACC,EAAA,EAAD,gBAOlB,kBAAC7B,EAAD,CAAQY,MAAM,2BAAOC,UAAU,eAC/B,kBAACb,EAAD,CAAQY,MAAM,2BAAOC,UAAU,cAC/B,kBAACb,EAAD,CAAQY,MAAM,2BAAOC,UAAU,YAC9BN,EACC,kBAACP,EAAD,CACEY,MAAM,eACNC,UAAU,MACVC,IAAI,SACJC,OAAQ,SAACO,EAAKQ,GAAN,OACN,uBACEC,QAAS,SAACC,GACRA,EAAEC,iBACF3B,EAAgBwB,KAGlB,kBAACI,EAAA,EAAD,UAIJ,M,4EClDFC,EAAWC,IAAXD,OAEO,SAASE,EAAT,GAA+D,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAU7C,EAAe,EAAfA,KAAMuB,EAAS,EAATA,MAAS,EAC/CuB,qBAD+C,mBACpE7C,EADoE,KAC5D8C,EAD4D,OAE5DC,IAAKC,UAAbC,EAFoE,oBAwB3E,OArBAC,qBAAU,WACR,GAAInD,EAAM,CACR+C,EAAU/C,EAAKC,QACf,IAAMmD,EAAYpD,EAAKoD,UAAYC,IAAOrD,EAAKoD,WAAaC,MACtDC,EAAUtD,EAAKsD,QAAUD,IAAOrD,EAAKsD,SAAWD,MAChDE,EAAgBvD,EAAKuB,MAAME,KAAI,SAACC,GAAD,OAAUA,EAAKC,OACpDuB,EAAKM,eAAL,2BACKxD,GADL,IAEEuD,gBACAH,YACAE,kBAGFJ,EAAKO,gBAEN,CAACzD,IAOF,kBAAC,IAAD,CACE0D,aAAW,EACXzC,MAAM,2BACND,MAAO,IACP2B,QAASA,EACTC,KAAM,WACJM,EACGS,iBACAC,MAAK,SAACC,GACLjB,EAAKiB,MAENC,OAAM,SAACC,GACNC,QAAQC,IAAI,iCAASF,OAG3BlB,SAAUA,EACVqB,OAAO,eACPC,WAAW,gBAEX,kBAAC,IAAD,CACEjB,KAAMA,EACNkB,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGR,kBAAC,IAAKE,KAAN,CACEC,KAAK,gBACLC,MAAM,qBACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gDAIb,kBAAC,IAAD,CACEC,YAAU,EACVC,YAAY,iCACZC,iBAAiB,QACjBC,gBAAgB,QAChBC,KAAK,YAEJ1D,EAAME,KAAI,SAACC,EAAMwD,GAAP,OACT,kBAAC1C,EAAD,CAAQrB,IAAK+D,EAAO7D,MAAOK,EAAKC,IAAKV,MAAOS,EAAKE,UAC/C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEE,MAAO,CAAEC,gBAAiBL,EAAKM,QAC/BC,KAAM,kBAACC,EAAA,EAAD,QAER,6BACE,+BAAKR,EAAKE,UACV,yBAAKE,MAAO,CAAE3B,MAAO,oBAAsBuB,EAAKyD,eAQ5D,kBAAC,IAAKZ,KAAN,CAAWC,KAAK,SAASC,MAAM,gBAC7B,kBAAC,IAAMjD,MAAP,CAAagD,KAAK,aAAaY,SApEvC,SAAsB/C,GACpBU,EAAUV,EAAEgD,OAAOhE,SAoEX,kBAAC,IAAD,CAAOA,MAAM,QAAb,sBACA,kBAAC,IAAD,CAAOA,MAAM,SAAb,sBACA,kBAAC,IAAD,CAAOA,MAAM,QAAb,wBAIQ,SAAXpB,EACC,kBAAC,IAAKsE,KAAN,CACEC,KAAK,YACLC,MAAM,2BACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sDAIb,kBAAC,IAAD,OAEA,KACQ,SAAX3E,EACC,kBAAC,IAAKsE,KAAN,CACEC,KAAK,UACLC,MAAM,2BACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sDAIb,kBAAC,IAAD,OAEA,O,YCrIG,SAASU,EAAK9E,GAAQ,IAAD,EACJsC,oBAAS,GADL,mBAC3BH,EAD2B,KAClB4C,EADkB,OAEVzC,mBAAS,CAAEvB,MAAO,KAFR,mBAE3BvB,EAF2B,KAErBwF,EAFqB,OAGR1C,mBAAS,IAHD,mBAG3BvB,EAH2B,KAGpBkE,EAHoB,OAIV3C,qBAJU,mBAI3BrC,EAJ2B,KAIrBiF,EAJqB,KAmDlC,OA7CAvC,qBAAU,WACRwC,cAAgB/B,MAAK,SAACgC,GACpB,IAAMC,EAASD,EAAInF,KACC,IAAhBoF,EAAOC,MACTL,EAASI,EAAOpF,WAGnB,IAEH0C,qBAAU,WACRuC,EAAQlF,EAAMC,QACb,CAACD,EAAMC,OAmCR,oCACE,kBAACF,EAAD,iBAAUC,EAAV,CAAiBC,KAAMA,EAAME,gBAlCjC,SAAmBX,GACjBuF,GAAW,GACXC,EAAQxF,OAiCN,kBAAC,EAAD,CACE2C,QAASA,EACTC,KA5BN,SAAkBiB,GAChBA,EAAOT,UAAYS,EAAOT,UACtBS,EAAOT,UAAU2C,OAAO,cACxB,KACJlC,EAAOP,QAAUO,EAAOP,QACpBO,EAAOP,QAAQyC,OAAO,cACtB,KACJlC,EAAOtC,MAAQA,EAAMyE,QACnB,SAACtE,GAAD,OAAsD,IAA5CmC,EAAON,cAAc0C,QAAQvE,EAAKC,QAE9C,IAAMA,EAAM3B,EAAK2B,IACjBuE,YAAY,2BAAKlG,GAAS6D,IAAUD,MAAK,SAACgC,GACxC,IAAMC,EAASD,EAAInF,KACnB,GAAoB,IAAhBoF,EAAOC,KAAY,CACrB,IAAMK,EAAW1F,EAAKgB,KAAI,SAACzB,GAAD,OACxBA,EAAK2B,MAAQA,EAAMkE,EAAOpF,KAAOT,KAEnCQ,EAAM4F,YAAYD,GAClBZ,GAAW,QAWX1C,SAjCN,WACE0C,GAAW,IAiCPvF,KAAMA,EACNuB,MAAK,sBAAMvB,EAAKuB,OAAX,YAAqBA,S,oBC/DlC8E,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,4B,oBCA7DD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,0BAA0B,SAAW,4B,gOCwCtF,SAAS/B,EAAT,GAAgC,IAAhBvE,EAAe,EAAfA,KAAMkF,EAAS,EAATA,MACnC,OACE,kBAAC,IAAD,CACEqB,YAAavG,EAAK2B,IAClBuD,MAAOA,IAGN,SAACsB,EAAUC,GAAX,OACC,uCACEC,UAAWC,IAAOC,UAClBC,IAAKL,EAASM,UACVN,EAASO,eACTP,EAASQ,iBAMb,kBAAC,IAAD,CAAMC,WAAW,GACf,2BAAIjH,EAAKkH,SACT,yBAAKR,UAAWC,IAAOQ,MAhDf,SAACnH,GACnB,OAAQA,EAAKC,QACX,IAAK,OACH,MAIE,qBAAQoD,IAAOrD,EAAKoH,YAAYrB,OAAO,SAE3C,IAAK,QACH,MAIE,qBAAQ1C,IAAOrD,EAAKoD,WAAW2C,OAAO,SAE1C,IAAK,OACH,MAIE,qBAAQ1C,IAAOrD,EAAKsD,SAASyC,OAAO,UA2BFsB,CAAYrH,IAC1C,6BACE,kBAAC,IAAOwB,MAAR,KACGxB,EAAKuB,MAAME,KAAI,SAACC,GAAD,OACd,kBAAC,IAAD,CAASP,IAAKO,EAAKC,IAAKV,MAAOS,EAAKE,SAAUC,UAAU,OACtD,kBAAC,IAAD,CACEC,MAAO,CAAEC,gBAAiBL,EAAKM,QAC/BC,KAAM,kBAACC,EAAA,EAAD,mB,sBC1Db,SAAS7B,EAAT,GAAwC,IAAtBJ,EAAqB,EAArBA,OAAQT,EAAa,EAAbA,MAAO8H,EAAM,EAANA,GAC9C,OACE,yBAAKZ,UAAWC,IAAOC,WACrB,wBAAIF,UAAWC,IAAO1F,MAAOa,MAAO,CAAEC,gBAAiB9B,EAAOE,QAC3DF,EAAOG,SAEV,kBAAC,IAAD,CACEmH,YAAaD,IAGZ,SAACd,GAAD,OACC,uCACEE,UAAWC,IAAOR,SAClBU,IAAKL,EAASM,UACVN,EAASgB,gBAGZhI,EAAMiC,KAAI,SAACzB,EAAMkF,GAAP,OACT,kBAACX,EAAD,CAAMpD,IAAKnB,EAAK2B,IAAK3B,KAAMA,EAAMkF,MAAOA,OAEzCsB,EAAS1B,iB,8BCsIP,SAAS2C,EAAMjH,GAAQ,IAAD,EACTsC,mBAAS,SADA,mBAC5BzB,EAD4B,KACrBqG,EADqB,OAET5E,mBAAS,IAFA,mBAE5B7B,EAF4B,KAErB0G,EAFqB,OAGT7E,mBAAS,CACjCpD,KAAM,GACNC,MAAO,GACPC,KAAM,KAN2B,mBAG5BJ,EAH4B,KAGrBoI,EAHqB,KASnCzE,qBAAU,WACR,IAAM0E,EAASrH,EAAMsH,MAAMD,OAErBE,EAAOF,EAAOE,MAAQ,SACtBT,EAAKO,EAAOP,IAAM,qBAGxBK,GADwB,WAATI,EAAoB,eAAO,gBAAQT,GAGlDU,YAAY,CAAED,OAAMT,OAAM1D,MAAK,SAACgC,GAC9B,IAAMC,EAASD,EAAInF,KACnB,GAAoB,IAAhBoF,EAAOC,KAAY,CACrB,IAAMmC,EAAgBpC,EAAOpF,KACvBjB,EAAQD,YAAU0I,GACxBL,EAASpI,SAGZ,IAEH,IA0DM0I,EAAcC,OAAOtE,OAAOrE,GAAO4I,OAEnCC,EACmB,IAAvBH,EAAYI,OACV,kBAAC,IAAD,CAAOC,MAAOC,IAAMC,yBAEpB,kBAAC,IAAD,CAAiBC,UAnDH,SAAC7C,GAAY,IACrB8C,EAAqC9C,EAArC8C,YAAaC,EAAwB/C,EAAxB+C,OAAQrC,EAAgBV,EAAhBU,YAE7B,GAAKoC,IAKHA,EAAYpB,cAAgBqB,EAAOrB,aACnCoB,EAAYzD,QAAU0D,EAAO1D,OAF/B,CAOA,IAAM2D,EAAQD,EAAOrB,YACfuB,EAASH,EAAYpB,YAGrBwB,EAAcvJ,EAAMqJ,GAAOG,MAAK,SAAChJ,GAAD,OAAUA,EAAK2B,MAAQ4E,KAM7DwC,EAAY9I,OAAS6I,EACN,SAAXA,IACFC,EAAY3F,UAAY,KACxB2F,EAAYzF,QAAU,MAET,UAAXwF,IACFC,EAAY3F,UAAYC,MAAS0C,OAAO,cACxCgD,EAAYzF,QAAU,MAET,SAAXwF,IAAmBC,EAAYzF,QAAUD,MAAS0C,OAAO,eAG7D,IAAMkD,EAAazJ,EAAMqJ,GACnBK,EAAc1J,EAAMsJ,GAE1BG,EAAWE,OAAOP,EAAO1D,MAAO,GAChCgE,EAAYC,OAAOR,EAAYzD,MAAO,EAAG6D,GAEzCnB,EAASpI,MAUL,yBAAKsC,MAAO,CAAE1B,QAAS,SACpB+H,OAAOiB,KAAKnJ,KAAQwB,KAAI,SAAC4H,EAAGnE,GAAJ,OACvB,kBAAC7E,EAAD,CAAQJ,OAAQA,IAAOoJ,GAAI/B,GAAI+B,EAAGlI,IAAK+D,EAAO1F,MAAOA,EAAM6J,UAK/DC,EACJ,kBAAC,IAAD,CACE7I,KAAMyH,EACNjI,OAAQA,IACRmG,YAxEgB,SAAC5G,GACnBoI,EAASrI,YAAUC,OA2ErB,OACE,kBAAC,IAAD,CACEyB,MAAOA,EACPsI,MACE,kBAAC,IAAM/H,MAAP,CAAagI,YAAY,QAAQpE,SApFtB,SAAC/C,GAChBqF,EAASrF,EAAEgD,OAAOhE,QAmFuCA,MAAOA,GAC1D,kBAAC,IAAMoI,OAAP,CAAcpI,MAAM,SAClB,kBAACqI,EAAA,EAAD,OAEF,kBAAC,IAAMD,OAAP,CAAcpI,MAAM,QAClB,kBAACsI,EAAA,EAAD,SAKK,UAAVtI,EAAoBgH,EAAYiB","file":"static/js/9.64274356.chunk.js","sourcesContent":["import Cookies from 'js-cookie';\nexport function getRedirectTo() {\n  const projectId = Cookies.get('projectId');\n  return projectId ? '/project/profile' : '/';\n}\n\nexport function sortTasks(tasks) {\n  let sortedTasks = {\n    todo: [],\n    doing: [],\n    done: [],\n  };\n  if (Array.isArray(tasks)) {\n    tasks.forEach((task) => {\n      sortedTasks[task.status].push(task);\n    });\n  }\n  return sortedTasks;\n}\n\nexport const status = {\n  todo: {\n    color: '#4a9ff9',\n    display: '未开始',\n  },\n  doing: {\n    color: '#f9944a',\n    display: '进行中',\n  },\n  done: {\n    color: '#2ac06d',\n    display: '已完成',\n  },\n};\n","import React from 'react';\nimport { Table, Avatar, Tooltip, Tag } from 'antd';\nimport { UserOutlined, EditOutlined } from '@ant-design/icons';\n\nconst { Column } = Table;\n\nexport default function List(props) {\n  const {\n    data,\n    status,\n    size = 'default',\n    onItemEditClick,\n    editable = true,\n  } = props;\n\n  return (\n    <Table dataSource={data} pagination={false} rowKey=\"_id\" size={size}>\n      <Column\n        width=\"90px\"\n        title=\"状态\"\n        dataIndex=\"status\"\n        key=\"status\"\n        render={(value) => {\n          const p = status[value];\n          return <Tag color={p.color}>{p.display}</Tag>;\n        }}\n      />\n      <Column title=\"内容\" dataIndex=\"content\" key=\"content\" />\n      <Column\n        title=\"参与者\"\n        dataIndex=\"users\"\n        key=\"users\"\n        render={(users) => (\n          <Avatar.Group>\n            {users.map((user) => (\n              <Tooltip key={user._id} title={user.username} placement=\"top\">\n                <Avatar\n                  style={{ backgroundColor: user.avatar }}\n                  icon={<UserOutlined />}\n                />\n              </Tooltip>\n            ))}\n          </Avatar.Group>\n        )}\n      />\n      <Column title=\"创建日期\" dataIndex=\"createDate\" />\n      <Column title=\"开始日期\" dataIndex=\"startDate\" />\n      <Column title=\"完成日期\" dataIndex=\"endDate\" />\n      {editable ? (\n        <Column\n          title=\"操作\"\n          dataIndex=\"_id\"\n          key=\"action\"\n          render={(_id, record) => (\n            <a\n              onClick={(e) => {\n                e.preventDefault();\n                onItemEditClick(record);\n              }}\n            >\n              <EditOutlined />\n            </a>\n          )}\n        />\n      ) : null}\n    </Table>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  Form,\n  Input,\n  DatePicker,\n  Radio,\n  Select,\n  Avatar,\n  Space,\n} from 'antd';\nimport moment from 'moment';\nimport { UserOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\nexport default function StoryModal({ visible, onOk, onCancel, task, users }) {\n  const [status, setStatus] = useState();\n  const [form] = Form.useForm();\n  useEffect(() => {\n    if (task) {\n      setStatus(task.status);\n      const startDate = task.startDate ? moment(task.startDate) : moment();\n      const endDate = task.endDate ? moment(task.endDate) : moment();\n      const selectedUsers = task.users.map((user) => user._id);\n      form.setFieldsValue({\n        ...task,\n        selectedUsers,\n        startDate,\n        endDate,\n      });\n    } else {\n      form.resetFields();\n    }\n  }, [task]);\n\n  function handleChange(e) {\n    setStatus(e.target.value);\n  }\n\n  return (\n    <Modal\n      forceRender\n      title=\"编辑任务\"\n      width={640}\n      visible={visible}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            onOk(values);\n          })\n          .catch((info) => {\n            console.log('验证失败：', info);\n          });\n      }}\n      onCancel={onCancel}\n      okText=\"确定\"\n      cancelText=\"取消\"\n    >\n      <Form\n        form={form}\n        labelCol={{\n          span: 5,\n        }}\n        wrapperCol={{\n          span: 16,\n        }}\n      >\n        <Form.Item\n          name=\"selectedUsers\"\n          label=\"参与者\"\n          rules={[\n            {\n              required: true,\n              message: '请选择参与者！',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            placeholder=\"选择参与者\"\n            optionFilterProp=\"title\"\n            optionLabelProp=\"title\"\n            mode=\"multiple\"\n          >\n            {users.map((user, index) => (\n              <Option key={index} value={user._id} title={user.username}>\n                <Space>\n                  <Avatar\n                    style={{ backgroundColor: user.avatar }}\n                    icon={<UserOutlined />}\n                  ></Avatar>\n                  <div>\n                    <a> {user.username}</a>\n                    <div style={{ color: 'rgba(0,0,0,.45)' }}>{user.email}</div>\n                  </div>\n                </Space>\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n\n        <Form.Item name=\"status\" label=\"状态\">\n          <Radio.Group name=\"radiogroup\" onChange={handleChange}>\n            <Radio value=\"todo\">未开始</Radio>\n            <Radio value=\"doing\">进行中</Radio>\n            <Radio value=\"done\">已完成</Radio>\n          </Radio.Group>\n        </Form.Item>\n\n        {status !== 'todo' ? (\n          <Form.Item\n            name=\"startDate\"\n            label=\"开始日期\"\n            rules={[\n              {\n                required: true,\n                message: '请选择开始日期！',\n              },\n            ]}\n          >\n            <DatePicker />\n          </Form.Item>\n        ) : null}\n        {status === 'done' ? (\n          <Form.Item\n            name=\"endDate\"\n            label=\"完成日期\"\n            rules={[\n              {\n                required: true,\n                message: '请选择完成日期！',\n              },\n            ]}\n          >\n            <DatePicker />\n          </Form.Item>\n        ) : null}\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport List from '../../../components/task/list';\nimport Modal from '../../../components/task/edit-modal';\nimport { reqMemberList, reqEditTask } from '../../../api/index';\n\nexport default function Task(props) {\n  const [visible, setVisible] = useState(false);\n  const [task, setTask] = useState({ users: [] });\n  const [users, setUsers] = useState([]);\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    reqMemberList().then((res) => {\n      const result = res.data;\n      if (result.code === 0) {\n        setUsers(result.data);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    setData(props.data);\n  }, [props.data]);\n\n  function showModal(task) {\n    setVisible(true);\n    setTask(task);\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  function handleOk(values) {\n    values.startDate = values.startDate\n      ? values.startDate.format('YYYY-MM-DD')\n      : null;\n    values.endDate = values.endDate\n      ? values.endDate.format('YYYY-MM-DD')\n      : null;\n    values.users = users.filter(\n      (user) => values.selectedUsers.indexOf(user._id) !== -1\n    );\n    const _id = task._id;\n    reqEditTask({ ...task, ...values }).then((res) => {\n      const result = res.data;\n      if (result.code === 0) {\n        const taskList = data.map((task) =>\n          task._id === _id ? result.data : task\n        );\n        props.updateTasks(taskList);\n        setVisible(false);\n      }\n    });\n  }\n\n  return (\n    <>\n      <List {...props} data={data} onItemEditClick={showModal}></List>\n      <Modal\n        visible={visible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        task={task}\n        users={[...task.users, ...users]}\n      ></Modal>\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"uhJNy-LGfyZSV_d-QGjs-\",\"date\":\"_2cYU0aORhMpwzIIqBrDPrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_3j3ghdkSsdKz1tNY21hoIL\",\"title\":\"_1yCzZg1J4ovXq3vPTvNaUQ\",\"taskList\":\"_2cAdd5AFC1pl0ssVvfqHf5\"};","import React, { Component } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Card, Avatar, Tooltip } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport styles from './item.module.less';\nimport moment from 'moment';\n\n// const getItemStyle = (isDragging, draggableStyle) => ({\n//   // change background colour if dragging\n//   background: isDragging ? 'lightgreen' : '',\n//   // styles we need to apply on draggables\n//   ...draggableStyle,\n// });\nconst displayDate = (task) => {\n  switch (task.status) {\n    case 'todo':\n      return (\n        // <Tooltip title={task.createDate} placement=\"top\">\n        //   {'创建于' + moment(task.createDate).fromNow()}\n        // </Tooltip>\n        '创建于' + moment(task.createDate).format('MM-DD')\n      );\n    case 'doing':\n      return (\n        // <Tooltip title={task.startDate} placement=\"top\">\n        //   {'开始于' + moment(task.startDate).fromNow()}\n        // </Tooltip>\n        '开始于' + moment(task.startDate).format('MM-DD')\n      );\n    case 'done':\n      return (\n        // <Tooltip title={task.endDate} placement=\"top\">\n        //   {'完成于' + moment(task.endDate).fromNow()}\n        // </Tooltip>\n        '完成于' + moment(task.endDate).format('MM-DD')\n      );\n    default:\n      break;\n  }\n};\n\nexport default function Item({ task, index }) {\n  return (\n    <Draggable\n      draggableId={task._id}\n      index={index}\n      // isDragDisabled={task.status === 'done'}\n    >\n      {(provided, snapshot) => (\n        <div\n          className={styles.container}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          // style={getItemStyle(\n          //   snapshot.isDragging,\n          //   provided.draggableProps.style\n          // )}\n        >\n          <Card hoverable={true}>\n            <p>{task.content}</p>\n            <div className={styles.date}>{displayDate(task)}</div>\n            <div>\n              <Avatar.Group>\n                {task.users.map((user) => (\n                  <Tooltip key={user._id} title={user.username} placement=\"top\">\n                    <Avatar\n                      style={{ backgroundColor: user.avatar }}\n                      icon={<UserOutlined />}\n                    />\n                  </Tooltip>\n                ))}\n              </Avatar.Group>\n            </div>\n          </Card>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React, { Component } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport Item from './item';\n\nimport styles from './column.module.less';\n\n// const getListStyle = (isDraggingOver) => ({\n//   background: isDraggingOver ? 'lightblue' : '',\n// });\n\nexport default function Column({ status, tasks, id }) {\n  return (\n    <div className={styles.container}>\n      <h4 className={styles.title} style={{ backgroundColor: status.color }}>\n        {status.display}\n      </h4>\n      <Droppable\n        droppableId={id}\n        // isDropDisabled={this.props.id === 'todo'}\n      >\n        {(provided) => (\n          <div\n            className={styles.taskList}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            // style={getListStyle(snapshot.isDraggingOver)}\n          >\n            {tasks.map((task, index) => (\n              <Item key={task._id} task={task} index={index} />\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n}\n","import React, { Component, useState, useEffect } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Card, Radio, Empty } from 'antd';\nimport { MenuOutlined, ProjectOutlined } from '@ant-design/icons';\nimport moment from 'moment';\n\nimport Column from '../../../components/board/column';\nimport TaskList from '../task/task';\nimport { reqTaskList } from '../../../api/index';\nimport { sortTasks, status } from '../../../utils/index';\n\n// export default class Board extends Component {\n//   state = {\n//     value: 'board',\n//     title: '',\n//     // originalTasks: [],\n//     tasks: {\n//       todo: [],\n//       doing: [],\n//       done: [],\n//     },\n//   };\n\n//   componentDidMount() {\n//     const params = this.props.match.params;\n//     //从菜单直接点进来，没有type和id\n//     const type = params.type || 'sprint';\n//     const id = params.id || '530000197311083057'; //todo:没有参数时，跳转到当前阶段的任务看板,这里id替换成当前阶段id\n\n//     const title = (type === 'sprint' ? '阶段' : '需求') + id;\n//     this.setState({\n//       title,\n//     });\n\n//     reqTaskList({ type, id }).then((res) => {\n//       const result = res.data;\n//       if (result.code === 0) {\n//         const originalTasks = result.data;\n//         const tasks = sortTasks(originalTasks);\n//         // console.log(tasks);\n//         this.setState({\n//           tasks,\n//           // originalTasks,\n//         });\n//       }\n//     });\n//   }\n\n//   onChange = (e) => {\n//     this.setState({\n//       value: e.target.value,\n//     });\n//   };\n\n//   updateTasks = (tasks) => {\n//     this.setState({\n//       tasks: sortTasks(tasks),\n//     });\n//   };\n\n//   /*方案1:如果需要将所有任务tasks作为store的一个属性，这里拖拽完后应该直接更新store.tasks的status，让页面自动重新渲染，但是会没有排序功能。\n//   方案2:只是在前端更新组件state的tasks，拖拽后直接调用接口更新被拖拽任务的status,同时可以实现排序功能（实际没什么意义，刷新后顺序会变）。\n//   两个方案不能同时使用，否则要么会导致store.tasks的状态更后端实际状态不一致，要么导致多次重新渲染。 */\n\n//   //方案2\n//   onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     if (!destination) {\n//       return;\n//     }\n\n//     if (\n//       destination.droppableId === source.droppableId &&\n//       destination.index === source.index\n//     ) {\n//       return;\n//     }\n\n//     const start = source.droppableId;\n//     const finish = destination.droppableId;\n\n//     //查询被拖拽的task\n//     const draggedTask = this.state.tasks[start].find(\n//       (task) => task._id === draggableId\n//     );\n//     // const draggedTaskInOriginalTasks = this.state.originalTasks.find(\n//     //   (task) => task._id === draggableId\n//     // );\n\n//     //todo：更新draggedTask的状态：更新后端数据库，如果成功再更新state\n//     draggedTask.status = finish;\n//     if (finish === 'todo') {\n//       draggedTask.startDate = null;\n//       draggedTask.endDate = null;\n//     }\n//     if (finish === 'doing') {\n//       draggedTask.startDate = moment().format('YYYY-MM-DD');\n//       draggedTask.endDate = null;\n//     }\n//     if (finish === 'done') draggedTask.endDate = moment().format('YYYY-MM-DD');\n//     // draggedTaskInOriginalTasks.status = finish;\n\n//     const { tasks } = this.state;\n//     const startTasks = tasks[start];\n//     const finishTasks = tasks[finish];\n\n//     startTasks.splice(source.index, 1);\n//     finishTasks.splice(destination.index, 0, draggedTask);\n\n//     this.setState({\n//       tasks,\n//     });\n//   };\n\n//   render() {\n//     const { tasks, value, title } = this.state;\n//     const tasksOfList = Object.values(tasks).flat();\n\n//     const boardView =\n//       tasksOfList.length === 0 ? (\n//         <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n//       ) : (\n//         <DragDropContext onDragEnd={this.onDragEnd}>\n//           <div style={{ display: 'flex' }}>\n//             {Object.keys(status).map((c, index) => (\n//               <Column status={status[c]} id={c} key={index} tasks={tasks[c]} />\n//             ))}\n//           </div>\n//         </DragDropContext>\n//       );\n//     const listView = (\n//       <TaskList\n//         data={tasksOfList}\n//         status={status}\n//         updateTasks={this.updateTasks}\n//       ></TaskList>\n//     );\n\n//     return (\n//       <Card\n//         title={title}\n//         extra={\n//           <Radio.Group\n//             buttonStyle=\"solid\"\n//             onChange={this.onChange}\n//             value={this.state.value}\n//           >\n//             <Radio.Button value=\"board\">\n//               <ProjectOutlined />\n//             </Radio.Button>\n//             <Radio.Button value=\"list\">\n//               <MenuOutlined />\n//             </Radio.Button>\n//           </Radio.Group>\n//         }\n//       >\n//         {value === 'board' ? boardView : listView}\n//       </Card>\n//     );\n//   }\n// }\n\n//hooks\nexport default function Board(props) {\n  const [value, setValue] = useState('board');\n  const [title, setTitle] = useState('');\n  const [tasks, setTasks] = useState({\n    todo: [],\n    doing: [],\n    done: [],\n  });\n\n  useEffect(() => {\n    const params = props.match.params;\n    //从菜单直接点进来，没有type和id\n    const type = params.type || 'sprint';\n    const id = params.id || '530000197311083057'; //todo:没有参数时，跳转到当前阶段的任务看板,这里id替换成当前阶段id\n\n    const title = (type === 'sprint' ? '阶段' : '需求') + id;\n    setTitle(title);\n\n    reqTaskList({ type, id }).then((res) => {\n      const result = res.data;\n      if (result.code === 0) {\n        const originalTasks = result.data;\n        const tasks = sortTasks(originalTasks);\n        setTasks(tasks);\n      }\n    });\n  }, []);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const updateTasks = (tasks) => {\n    setTasks(sortTasks(tasks));\n  };\n\n  /*方案1:如果需要将所有任务tasks作为store的一个属性，这里拖拽完后应该直接更新store.tasks的status，让页面自动重新渲染，但是会没有排序功能。\n  方案2:只是在前端更新组件state的tasks，拖拽后直接调用接口更新被拖拽任务的status,同时可以实现排序功能（实际没什么意义，刷新后顺序会变）。\n  两个方案不能同时使用，否则要么会导致store.tasks的状态更后端实际状态不一致，要么导致多次重新渲染。 */\n\n  //方案2\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = source.droppableId;\n    const finish = destination.droppableId;\n\n    //查询被拖拽的task\n    const draggedTask = tasks[start].find((task) => task._id === draggableId);\n    // const draggedTaskInOriginalTasks = originalTasks.find(\n    //   (task) => task._id === draggableId\n    // );\n\n    //todo：更新draggedTask的状态：更新后端数据库，如果成功再更新state\n    draggedTask.status = finish;\n    if (finish === 'todo') {\n      draggedTask.startDate = null;\n      draggedTask.endDate = null;\n    }\n    if (finish === 'doing') {\n      draggedTask.startDate = moment().format('YYYY-MM-DD');\n      draggedTask.endDate = null;\n    }\n    if (finish === 'done') draggedTask.endDate = moment().format('YYYY-MM-DD');\n    // draggedTaskInOriginalTasks.status = finish;\n\n    const startTasks = tasks[start];\n    const finishTasks = tasks[finish];\n\n    startTasks.splice(source.index, 1);\n    finishTasks.splice(destination.index, 0, draggedTask);\n\n    setTasks(tasks);\n  };\n\n  const tasksOfList = Object.values(tasks).flat();\n\n  const boardView =\n    tasksOfList.length === 0 ? (\n      <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\n    ) : (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div style={{ display: 'flex' }}>\n          {Object.keys(status).map((c, index) => (\n            <Column status={status[c]} id={c} key={index} tasks={tasks[c]} />\n          ))}\n        </div>\n      </DragDropContext>\n    );\n  const listView = (\n    <TaskList\n      data={tasksOfList}\n      status={status}\n      updateTasks={updateTasks}\n    ></TaskList>\n  );\n\n  return (\n    <Card\n      title={title}\n      extra={\n        <Radio.Group buttonStyle=\"solid\" onChange={onChange} value={value}>\n          <Radio.Button value=\"board\">\n            <ProjectOutlined />\n          </Radio.Button>\n          <Radio.Button value=\"list\">\n            <MenuOutlined />\n          </Radio.Button>\n        </Radio.Group>\n      }\n    >\n      {value === 'board' ? boardView : listView}\n    </Card>\n  );\n}\n"],"sourceRoot":""}